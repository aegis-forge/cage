package cage

import (
	"strings"
	"time"
)

// Vulnerability represents a vulnerability of a software package
type Vulnerability struct {
	Cve              string         `json:"cve"`
	Cwes             []string       `json:"cwes"`
	Cvss             float32        `json:"cvss"`
	Published        time.Time      `json:"published"`
	RangesVulnerable []VersionRange `json:"vulnerable_ranges"`
	RangesPatched    []VersionRange `json:"patched_ranges"`
}

// NewVulnerability creates a [Vulnerability] struct. If `timeFormat` is an
// empty string, then the default `2006-01-02 15:04:05 -0700` format is used.
func NewVulnerability(cve string, cwes []string, cvss float32,
	published string, rangesVulnerable, rangesPatched []VersionRange,
	timeFormat string) (*Vulnerability, error) {

	if timeFormat == "" {
		timeFormat = "2006-01-02 15:04:05 -0700"
	}

	timeFormatted, err := time.Parse(timeFormat, strings.TrimSpace(published))

	if err != nil {
		return nil, err
	}

	return &Vulnerability{
		Cve: cve, Cwes: cwes, Cvss: cvss, Published: timeFormatted,
		RangesVulnerable: rangesVulnerable, RangesPatched: rangesPatched,
	}, nil
}
